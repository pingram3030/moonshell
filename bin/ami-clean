#!/usr/bin/env bash
#
# Find and deregister either all unused AMIs, or only those of $ROLE
#

export MOON_FILE=false

source $(dirname $0)/../moon.sh

if [[ $# -lt 1 ]]; then
    echoerr "Deregister AMIs in the currently set account."
    echoerr "Usage: $(basename $0) all|ROLE [AMI_TO_EXCLUDE AMI AMI]"
    echoerr
    echoerr "Notes:"
    echoerr " * ROLE is the value of the 'role' tag set on the AMI by Packer"
    echoerr " * ROLE must be quoted if it contains spaces"
    echoerr " * This script is designed for automated operation, it must be cancelled manually"
    exit
else
    ROLE=$1
    shift
    EXCLUDE=(${@-})
fi

TIMEOUT=5

[[ ${ROLE} == "all" ]] \
    && AMIS=($(ami_list_all)) \
    || AMIS=($(ami_list_role "${ROLE}"))

if [[ ! ${ROLE} == build ]]; then
    echoerr "INFO: Finding 'build' AMIs for exclusion"
    BUILD_AMIS=($(ami_list_role build))
    EXCLUDE+=(${BUILD_AMIS[@]})
fi

for exclude in ${EXCLUDE[@]-}; do
    if [[ ${exclude} =~ ^ami-[0-9a-f]+$ ]]; then
        echoerr "INFO: Excluding AMI: ${exclude}"
        AMIS=(${AMIS[@]/$exclude/})
    else
        echoerr "WARNING: Ignoring invalid AMI: ${exclude}"
    fi
done

if [[ ${AMIS[@]-} ]]; then
    for ami in ${AMIS[@]}; do
        instances=($(instances_running_ami ${ami}))
        if [[ ${instances[@]-} ]]; then
            echoerr "INFO: Instances running from ${ami}"
            echoerr "instances=(${instances[@]})"
        else
            echoerr "INFO: No instances are running from ${ami}"
            ami_deregister ${ami} ${TIMEOUT}
        fi
    done
else
    echoerr "INFO: No AMIs found"
fi

